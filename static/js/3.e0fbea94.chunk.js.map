{"version":3,"sources":["components/utils/forms/component/Textarea.js","../node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","components/postsForm/PostsForm.jsx","components/postsForm/PostsFromContainer.js"],"names":["Textarea","props","input","restProps","meta","_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","length","err","unsupportedIterableToArray","TypeError","maxLengthPostsFormTitle","maxLength","minLengthPostsFormTitle","minLength","maxLengthPostsFormDescription","minLengthPostsFormDescription","minLengthPostsFormText","PostsFormReduxForm","reduxForm","form","to","type","className","onSubmit","handleSubmit","htmlFor","createFrom","Input","requiredField","Field","name","component","id","placeholder","compose","connect","state","userId","authData","postAddThunk","withRouter","AuthRedirectHOK","useState","editMode","setEditMode","formData","then"],"mappings":"gLAGaA,EAAW,SAACC,GAAW,IAC1BC,EAA8BD,EAA9BC,MAAgBC,GAAcF,EAAvBG,KADkB,YACKH,EADL,mBAEjC,OACE,kBAAC,IAAgBA,EACf,2CAAWC,EAAWC,O,+ECHb,SAASE,EAAeC,EAAKC,GAC1C,OCLa,SAAyBD,GACtC,GAAIE,MAAMC,QAAQH,GAAM,OAAOA,EDIxB,CAAeA,IELT,SAA+BA,EAAKC,GACjD,GAAsB,qBAAXG,QAA4BA,OAAOC,YAAYC,OAAON,GAAjE,CACA,IAAIO,EAAO,GACPC,GAAK,EACLC,GAAK,EACLC,OAAKC,EAET,IACE,IAAK,IAAiCC,EAA7BC,EAAKb,EAAII,OAAOC,cAAmBG,GAAMI,EAAKC,EAAGC,QAAQC,QAChER,EAAKS,KAAKJ,EAAGK,QAEThB,GAAKM,EAAKW,SAAWjB,GAH8CO,GAAK,IAK9E,MAAOW,GACPV,GAAK,EACLC,EAAKS,EACL,QACA,IACOX,GAAsB,MAAhBK,EAAW,QAAWA,EAAW,SAC5C,QACA,GAAIJ,EAAI,MAAMC,GAIlB,OAAOH,GFnBuB,CAAqBP,EAAKC,IAAM,OAAAmB,EAAA,GAA2BpB,EAAKC,IGLjF,WACb,MAAM,IAAIoB,UAAU,6IHIgF,K,sKIIlGC,EAA0BC,YAAU,IAClCC,EAA0BC,YAAU,GACpCC,EAAgCH,YAAU,IAC1CI,EAAgCF,YAAU,IAC1CG,EAAyBH,YAAU,GA+D1BI,EADYC,YAAU,CAAEC,KAAM,aAAlBD,EA5DT,SAAAnC,GACjB,OACC,6BACC,6BACC,kBAAC,IAAD,CAASqC,GAAI,KACZ,4BAAQC,KAAK,SAASC,UAAU,iDAAhC,UAKF,yBAAKA,UAAU,iBACd,0BAAMC,SAAUxC,EAAMyC,cACrB,yBAAKF,UAAU,cACd,2BAAOG,QAAQ,SAAf,WACCC,YAAW,QAASC,IAAO,GAAI,eAAgB,cAAe,mBAAoB,CAClFf,EACAF,EACAkB,OAGF,yBAAKN,UAAU,yBACd,2BAAOA,UAAU,mBAAmBG,QAAQ,eAA5C,eAGCC,YAAW,cAAeC,IAAO,GAAI,eAAgB,cAAe,eAAgB,CACpFb,EACAC,KAGF,yBAAKO,UAAU,cACd,2BAAOG,QAAQ,SAAf,aACA,kBAACI,EAAA,EAAD,CACCC,KAAK,WACLC,UAAWJ,IACXN,KAAK,OACLC,UAAU,eACVU,GAAG,iBACHC,YAAY,qBAGd,yBAAKX,UAAU,cACd,2BAAOG,QAAQ,+BAAf,eACCC,YACA,OACA5C,IACA,GACA,eACA,8BACA,kBACA,CAACkC,KAGH,4BAAQK,KAAK,SAASC,UAAU,mBAAhC,mB,qCCzCUY,4BAAQC,aALD,SAAAC,GAAK,sBACvBA,EADuB,CAE1BC,OAAQD,EAAME,SAASD,WAGwB,CAAEE,mBAAiBC,IAAYC,IAAhEP,EAlBY,SAAAnD,GAAU,IAAD,EACL2D,oBAAS,GADJ,mBAC9BC,EAD8B,KACpBC,EADoB,KAUnC,OAAQD,EAAwD,kBAAC,IAAD,CAAUvB,GAAG,WAA1D,kBAAC,EAAD,CAAoBG,SAPxB,SAAAsB,GACd,IAAIR,EAAStD,EAAMsD,OACnBtD,EAAMwD,aAAaF,EAAQQ,GAAUC,MAAK,WACzCF,GAAY","file":"static/js/3.e0fbea94.chunk.js","sourcesContent":["import React from 'react';\nimport {FormControl} from \"./formControl/FormControl\";\n\nexport const Textarea = (props) => {\n  const { input, meta, ...restProps } = props;\n  return (\n    <FormControl {...props}>\n      <input {...input} {...restProps} />\n    </FormControl>\n  );\n};\n","import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import React from 'react';\nimport './PostsForm.scss';\nimport { Field, reduxForm } from 'redux-form';\nimport { createFrom } from '../utils/forms/CreateForm';\nimport { Input } from '../utils/forms/component/Input';\nimport { NavLink } from 'react-router-dom';\nimport { maxLength, minLength, requiredField } from '../utils/valodators/Valitators';\nimport { Textarea } from '../utils/forms/component/Textarea';\n\nlet maxLengthPostsFormTitle = maxLength(20);\nconst minLengthPostsFormTitle = minLength(5);\nconst maxLengthPostsFormDescription = maxLength(50);\nconst minLengthPostsFormDescription = minLength(10);\nconst minLengthPostsFormText = minLength(5);\n\nconst PostsForm = props => {\n\treturn (\n\t\t<div>\n\t\t\t<div>\n\t\t\t\t<NavLink to={'/'}>\n\t\t\t\t\t<button type='button' className='btn__posts btn-primary btn-lg nav_button_form'>\n\t\t\t\t\t\tBack\n\t\t\t\t\t</button>\n\t\t\t\t</NavLink>\n\t\t\t</div>\n\t\t\t<div className='posts_content'>\n\t\t\t\t<form onSubmit={props.handleSubmit}>\n\t\t\t\t\t<div className='form-group'>\n\t\t\t\t\t\t<label htmlFor='title'> Title </label>\n\t\t\t\t\t\t{createFrom('title', Input, {}, 'form-control', 'submitTitle', 'enter title text', [\n\t\t\t\t\t\t\tminLengthPostsFormTitle,\n\t\t\t\t\t\t\tmaxLengthPostsFormTitle,\n\t\t\t\t\t\t\trequiredField\n\t\t\t\t\t\t])}\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className='form-group form-check'>\n\t\t\t\t\t\t<label className='form-check-label' htmlFor='description'>\n\t\t\t\t\t\t\tDescription\n\t\t\t\t\t\t</label>\n\t\t\t\t\t\t{createFrom('description', Input, {}, 'form-control', 'description', 'Add new text', [\n\t\t\t\t\t\t\tmaxLengthPostsFormDescription,\n\t\t\t\t\t\t\tminLengthPostsFormDescription\n\t\t\t\t\t\t])}\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className='form-group'>\n\t\t\t\t\t\t<label htmlFor='image'>Image url</label>\n\t\t\t\t\t\t<Field\n\t\t\t\t\t\t\tname='imageURL'\n\t\t\t\t\t\t\tcomponent={Input}\n\t\t\t\t\t\t\ttype='text'\n\t\t\t\t\t\t\tclassName='form-control'\n\t\t\t\t\t\t\tid='submitImageURL'\n\t\t\t\t\t\t\tplaceholder='enter image url'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className='form-group'>\n\t\t\t\t\t\t<label htmlFor='exampleFormControlTextarea1'> Your text </label>\n\t\t\t\t\t\t{createFrom(\n\t\t\t\t\t\t\t'text',\n\t\t\t\t\t\t\tTextarea,\n\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t'form-control',\n\t\t\t\t\t\t\t'exampleFormControlTextarea1',\n\t\t\t\t\t\t\t'enter your text',\n\t\t\t\t\t\t\t[minLengthPostsFormText]\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t\t<button type='submit' className='btn btn-primary'>\n\t\t\t\t\t\tSend post\n\t\t\t\t\t</button>\n\t\t\t\t</form>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\nconst PostsFormReduxForm = reduxForm({ form: 'postsForm' })(PostsForm);\nexport default PostsFormReduxForm;\n","import React, { useState } from 'react';\nimport PostsFormReduxForm from './PostsForm';\nimport { postAddThunk } from '../../redux/reducer/PostsReducer';\nimport { connect } from 'react-redux';\nimport { Redirect, withRouter } from 'react-router-dom';\nimport { compose } from 'redux';\nimport { AuthRedirectHOK } from '../../redux/HOC/AuthRedirectHOK';\n\nconst PostsFromContainer = props => {\n\tlet [editMode, setEditMode] = useState(false);\n\n\tlet onSubmit = formData => {\n\t\tlet userId = props.userId;\n\t\tprops.postAddThunk(userId, formData).then(() => {\n\t\t\tsetEditMode(true);\n\t\t});\n\t};\n\n\treturn !editMode ? <PostsFormReduxForm onSubmit={onSubmit} /> : <Redirect to='/posts' />;\n};\n\nlet mapStateToProps = state => ({\n\t...state,\n\tuserId: state.authData.userId\n});\n\nexport default compose(connect(mapStateToProps, { postAddThunk }), withRouter, AuthRedirectHOK)(PostsFromContainer);\n"],"sourceRoot":""}