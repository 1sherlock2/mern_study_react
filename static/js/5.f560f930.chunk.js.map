{"version":3,"sources":["components/utils/forms/component/Textarea.js","../node_modules/react-bootstrap/esm/createChainedFunction.js","../node_modules/react-bootstrap/esm/SafeAnchor.js","../node_modules/react-bootstrap/esm/Button.js","components/postEdit/PostEdit.jsx","components/postEdit/PostEditContainer.js"],"names":["Textarea","props","input","restProps","meta","createChainedFunction","_len","arguments","length","funcs","Array","_key","filter","f","reduce","acc","Error","_len2","args","_key2","apply","this","isTrivialHref","href","trim","SafeAnchor","React","forwardRef","_ref","ref","_ref$as","as","Component","disabled","onKeyDown","_objectWithoutPropertiesLoose","handleClick","event","onClick","preventDefault","stopPropagation","role","tabIndex","createElement","_extends","key","displayName","Button","bsPrefix","variant","size","active","className","block","type","prefix","useBootstrapPrefix","classes","classNames","defaultProps","maxLengthPostsFormTitle","maxLength","minLengthPostsFormTitle","minLength","maxLengthPostsFormDescription","minLengthPostsFormDescription","minLengthPostsFormText","PostEditFormReduxForm","reduxForm","form","editMode","to","postById","_id","onSubmit","handleSubmit","htmlFor","createFrom","Input","requiredField","text","activateEditMode","PostEditContainer","setState","state","formData","id","match","params","editPostThunk","then","changeURL","bind","postId","postsByIdThunk","console","log","prevProps","prevState","snapshot","compose","connect","postsData","userId","authData","withRouter","AuthRedirectHOK"],"mappings":"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","file":"static/js/5.f560f930.chunk.js","sourcesContent":["import React from 'react';\nimport {FormControl} from \"./formControl/FormControl\";\n\nexport const Textarea = (props) => {\n  const { input, meta, ...restProps } = props;\n  return (\n    <FormControl {...props}>\n      <input {...input} {...restProps} />\n    </FormControl>\n  );\n};\n","/**\n * Safe chained function\n *\n * Will only create a new function if needed,\n * otherwise will pass back existing functions or null.\n *\n * @param {function} functions to chain\n * @returns {function|null}\n */\nfunction createChainedFunction() {\n  for (var _len = arguments.length, funcs = new Array(_len), _key = 0; _key < _len; _key++) {\n    funcs[_key] = arguments[_key];\n  }\n\n  return funcs.filter(function (f) {\n    return f != null;\n  }).reduce(function (acc, f) {\n    if (typeof f !== 'function') {\n      throw new Error('Invalid Argument Type, must only provide functions, undefined, or null.');\n    }\n\n    if (acc === null) return f;\n    return function chainedFunction() {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      acc.apply(this, args);\n      f.apply(this, args);\n    };\n  }, null);\n}\n\nexport default createChainedFunction;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport createChainedFunction from './createChainedFunction';\n\nfunction isTrivialHref(href) {\n  return !href || href.trim() === '#';\n}\n/**\n * There are situations due to browser quirks or Bootstrap CSS where\n * an anchor tag is needed, when semantically a button tag is the\n * better choice. SafeAnchor ensures that when an anchor is used like a\n * button its accessible. It also emulates input `disabled` behavior for\n * links, which is usually desirable for Buttons, NavItems, DropdownItems, etc.\n */\n\n\nvar SafeAnchor = React.forwardRef(function (_ref, ref) {\n  var _ref$as = _ref.as,\n      Component = _ref$as === void 0 ? 'a' : _ref$as,\n      disabled = _ref.disabled,\n      onKeyDown = _ref.onKeyDown,\n      props = _objectWithoutPropertiesLoose(_ref, [\"as\", \"disabled\", \"onKeyDown\"]);\n\n  var handleClick = function handleClick(event) {\n    var href = props.href,\n        onClick = props.onClick;\n\n    if (disabled || isTrivialHref(href)) {\n      event.preventDefault();\n    }\n\n    if (disabled) {\n      event.stopPropagation();\n      return;\n    }\n\n    if (onClick) {\n      onClick(event);\n    }\n  };\n\n  var handleKeyDown = function handleKeyDown(event) {\n    if (event.key === ' ') {\n      event.preventDefault();\n      handleClick(event);\n    }\n  };\n\n  if (isTrivialHref(props.href)) {\n    props.role = props.role || 'button'; // we want to make sure there is a href attribute on the node\n    // otherwise, the cursor incorrectly styled (except with role='button')\n\n    props.href = props.href || '#';\n  }\n\n  if (disabled) {\n    props.tabIndex = -1;\n    props['aria-disabled'] = true;\n  }\n\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    ref: ref\n  }, props, {\n    onClick: handleClick,\n    onKeyDown: createChainedFunction(handleKeyDown, onKeyDown)\n  }));\n});\nSafeAnchor.displayName = 'SafeAnchor';\nexport default SafeAnchor;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport classNames from 'classnames';\nimport React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport SafeAnchor from './SafeAnchor';\nvar defaultProps = {\n  variant: 'primary',\n  active: false,\n  disabled: false,\n  type: 'button'\n};\nvar Button = React.forwardRef(function (_ref, ref) {\n  var bsPrefix = _ref.bsPrefix,\n      variant = _ref.variant,\n      size = _ref.size,\n      active = _ref.active,\n      className = _ref.className,\n      block = _ref.block,\n      type = _ref.type,\n      as = _ref.as,\n      props = _objectWithoutPropertiesLoose(_ref, [\"bsPrefix\", \"variant\", \"size\", \"active\", \"className\", \"block\", \"type\", \"as\"]);\n\n  var prefix = useBootstrapPrefix(bsPrefix, 'btn');\n  var classes = classNames(className, prefix, active && 'active', prefix + \"-\" + variant, block && prefix + \"-block\", size && prefix + \"-\" + size);\n\n  if (props.href) {\n    return /*#__PURE__*/React.createElement(SafeAnchor, _extends({}, props, {\n      as: as,\n      ref: ref,\n      className: classNames(classes, props.disabled && 'disabled')\n    }));\n  }\n\n  if (ref) {\n    props.ref = ref;\n  }\n\n  if (!as) {\n    props.type = type;\n  }\n\n  var Component = as || 'button';\n  return /*#__PURE__*/React.createElement(Component, _extends({}, props, {\n    className: classes\n  }));\n});\nButton.displayName = 'Button';\nButton.defaultProps = defaultProps;\nexport default Button;","import React from 'react';\nimport './PostEdit.scss';\nimport { reduxForm } from 'redux-form';\nimport { createFrom } from '../utils/forms/CreateForm';\nimport { Input } from '../utils/forms/component/Input';\nimport { NavLink } from 'react-router-dom';\nimport { Button } from 'react-bootstrap';\nimport { Textarea } from '../utils/forms/component/Textarea';\nimport { maxLength, minLength, requiredField } from '../utils/valodators/Valitators';\n\nlet maxLengthPostsFormTitle = maxLength(20);\nconst minLengthPostsFormTitle = minLength(5);\nconst maxLengthPostsFormDescription = maxLength(50);\nconst minLengthPostsFormDescription = minLength(10);\nconst minLengthPostsFormText = minLength(5);\n\nconst PostEdit = props => {\n\treturn (\n\t\t<div>\n\t\t\t{!props.editMode ? (\n\t\t\t\t<div className='post-content'>\n\t\t\t\t\t<div className='nav_button_edit'>\n\t\t\t\t\t\t<NavLink to={'/'}>\n\t\t\t\t\t\t\t<button type='button' className='btn__posts btn-primary btn-lg'>\n\t\t\t\t\t\t\t\t{' '}\n\t\t\t\t\t\t\t\tBack\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</NavLink>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className='post-items'>\n\t\t\t\t\t\t{props.postById && (\n\t\t\t\t\t\t\t<div className='post-item'>\n\t\t\t\t\t\t\t\t<p>{props.postById.text}</p>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t<Button variant='secondary' size='sm' block onClick={() => props.activateEditMode()}>\n\t\t\t\t\t\t\tEdit\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t) : (\n\t\t\t\t<div className='posts_edit_form'>\n\t\t\t\t\t<div className='nav_button_edit'>\n\t\t\t\t\t\t<NavLink to={`/posts/:${props.postById._id}`}>\n\t\t\t\t\t\t\t<button type='button' className='btn__posts btn-primary btn-lg'>\n\t\t\t\t\t\t\t\t{' '}\n\t\t\t\t\t\t\t\tBack\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</NavLink>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className='posts_content'>\n\t\t\t\t\t\t<form onSubmit={props.handleSubmit}>\n\t\t\t\t\t\t\t<div className='form-group'>\n\t\t\t\t\t\t\t\t<label htmlFor='title'> Title </label>\n\t\t\t\t\t\t\t\t{createFrom('title', Input, {}, 'form-control', 'submitTitle', 'enter title text', [\n\t\t\t\t\t\t\t\t\tmaxLengthPostsFormTitle,\n\t\t\t\t\t\t\t\t\tminLengthPostsFormTitle,\n\t\t\t\t\t\t\t\t\trequiredField\n\t\t\t\t\t\t\t\t])}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className='form-group form-check'>\n\t\t\t\t\t\t\t\t<label className='form-check-label' htmlFor='description'>\n\t\t\t\t\t\t\t\t\t{' '}\n\t\t\t\t\t\t\t\t\tDescription{' '}\n\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t{createFrom('description', Input, {}, 'form-control', 'description', 'Add new text', [\n\t\t\t\t\t\t\t\t\tmaxLengthPostsFormDescription,\n\t\t\t\t\t\t\t\t\tminLengthPostsFormDescription\n\t\t\t\t\t\t\t\t])}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className='form-group'>\n\t\t\t\t\t\t\t\t<label htmlFor='image'>Image url</label>\n\t\t\t\t\t\t\t\t{createFrom('imageURL', Input, 'text', 'form-control', 'submitImageURL', 'enter image url', requiredField)}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className='form-group'>\n\t\t\t\t\t\t\t\t<label htmlFor='exampleFormCosntrolTextarea1'> Your text </label>\n\t\t\t\t\t\t\t\t{createFrom('text', Textarea, {}, 'form-control', 'exampleFormControlTextarea1', 'enter your text', minLengthPostsFormText)}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<button type='submit' className='btn btn-primary'>\n\t\t\t\t\t\t\t\t{' '}\n\t\t\t\t\t\t\t\tSend post\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</form>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</div>\n\t);\n};\nconst PostEditFormReduxForm = reduxForm({ form: 'postEdit' })(PostEdit);\nexport default PostEditFormReduxForm;\n","import React, {useEffect, useState} from \"react\";\nimport {editPostThunk, postsByIdThunk} from \"../../redux/reducer/PostsReducer\";\nimport {connect} from \"react-redux\";\nimport PostEditFormReduxForm from \"./PostEdit\";\nimport {Redirect, Route, withRouter} from \"react-router-dom\";\nimport {compose} from \"redux\";\nimport {AuthRedirectHOK} from \"../../redux/HOC/AuthRedirectHOK\";\n\n\nclass PostEditContainer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      editMode: false,\n      postById: this.props.postById,\n      changeURL: false\n    }\n    this.activateEditMode = this.activateEditMode.bind(this)\n    this.onSubmit = this.onSubmit.bind(this)\n  }\n\n  componentDidMount() {\n    let postId = this.props.match.params.id\n    this.props.postsByIdThunk(postId)\n    console.log('componentDidMount')\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (prevProps.postById !== this.state.postById) {\n      this.setState({...this.state, postById: this.props.postById})\n      console.log('componentDidUpdate')\n    }\n  }\n\n  activateEditMode = () => {\n    this.setState({\n      ...this.state,\n      editMode: true,\n    })\n  }\n\n  onSubmit = (formData) => {\n    let id = this.props.match.params.id\n    this.props.editPostThunk(id, formData).then(() => {\n      this.setState({...this.state, changeURL: true})\n    })\n  }\n\n  render() {\n    console.log('render')\n    return (\n      !this.state.changeURL ?\n        <PostEditFormReduxForm editMode={this.state.editMode} activateEditMode={this.activateEditMode}\n                               onSubmit={this.onSubmit} postById={this.props.postById}/>\n        : <Redirect to='/'/>\n    )\n  }\n}\n\nlet mapStateToProps = (state) => ({\n  postById: state.postsData.postById,\n  userId: state.authData.userId,\n})\n\nexport default compose(connect(mapStateToProps, {editPostThunk, postsByIdThunk}),withRouter,AuthRedirectHOK)(PostEditContainer)\n\n// let [editMode, setEditMode] = useState(false)\n// let [postById, setPostById] = useState(props.postById)\n//\n// let activateEditMode = () => {\n//   setEditMode(true)\n// }\n//\n// let onSubmit = (formData) => {\n//   let id = props.match.params.id\n//   props.editPostThunk(id,formData).then(() => {\n//     setEditMode(false)\n//   })\n// }\n//\n// useEffect(() => {\n//   onSubmit()\n// }, [postsByIdThunk(props.match.params.id)])\n"],"sourceRoot":""}